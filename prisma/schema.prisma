generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id           String   @id @unique @default(cuid())
  displayName  String
  email        String   @unique
  status       Boolean  @default(true)
  residence    String   @default("ETH")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  firstName    String?
  lastName     String?
  profileImage String?

  Page         Page?
  Subscription Subscription[]
  user1Id      PrivateChat[]  @relation("user1Id")
  user2Id      PrivateChat[]  @relation("user2Id")
  Donation     Donation[]
}

model Page {
  id                    String     @id @unique @default(cuid())
  url                   String     @unique
  name                  String
  status                PageStatus @default(INACTIVE)
  earningsVisibility    Boolean    @default(false)
  supportersVisibility  Boolean    @default(false)
  createdAt             DateTime   @default(now())
  updatedAt             DateTime   @updatedAt
  headline              String?
  profileImage          String?
  description           String?    @db.Text
  highlightedMembership String?
  coverImage            String?
  introVideo            String?
  brandColor            String?

  owner         User           @relation(fields: [ownerId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  ownerId       String         @unique
  Membership    Membership[]
  Goal          Goal[]
  CommunityChat CommunityChat?
  SocialLink    SocialLink[]
  Project       Project[]
  Post          Post[]
}

model Membership {
  id          String   @id @unique @default(cuid())
  title       String
  fee         Float
  status      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  description String?  @db.Text
  coverImage  String?

  page         Page           @relation(fields: [pageId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  pageId       String
  Subscription Subscription[]
  Benefit      Benefit[]

  @@index([pageId])
}

model Subscription {
  id        String        @id @unique @default(cuid())
  status    PaymentStatus @default(PENDING)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  subscriber   User   @relation(fields: [subscriberId], references: [id], onUpdate: Cascade, onDelete: NoAction)
  subscriberId String

  membership    Membership  @relation(fields: [membershipId], references: [id], onUpdate: Cascade, onDelete: NoAction)
  membershipId  String
  transaction   Transaction @relation(fields: [transactionId], references: [reference], onUpdate: Cascade, onDelete: NoAction)
  transactionId String

  @@index([subscriberId])
  @@index([membershipId])
  @@index([transactionId])
}

model Goal {
  id          String   @id @unique @default(cuid())
  title       String
  type        GoalType
  amount      Int
  description String   @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  page   Page   @relation(fields: [pageId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  pageId String

  @@index([pageId])
}

model Benefit {
  id          String @id @unique @default(cuid())
  title       String
  description String @db.Text

  Membership   Membership @relation(fields: [membershipId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  membershipId String

  @@index([membershipId])
}

model SocialLink {
  id   String         @id @unique @default(cuid())
  url  String
  type SocialLinkType

  page   Page   @relation(fields: [pageId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  pageId String

  @@index([pageId])
}

model Chat {
  id        String   @id @unique @default(cuid())
  createdAt DateTime @default(now())

  Message       Message[]
  PrivateChat   PrivateChat?
  CommunityChat CommunityChat?
}

model PrivateChat {
  id      Chat    @relation(fields: [chatId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  chatId  String  @unique
  user1   User?   @relation(fields: [user1Id], references: [id], name: "user1Id", onUpdate: Cascade, onDelete: SetNull)
  user1Id String?
  user2   User?   @relation(fields: [user2Id], references: [id], name: "user2Id", onUpdate: Cascade, onDelete: SetNull)
  user2Id String?

  @@id([chatId])
  @@index([user1Id])
  @@index([user2Id])
}

model CommunityChat {
  id     Chat   @relation(fields: [chatId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  chatId String @unique
  page   Page   @relation(fields: [pageId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  pageId String @unique

  @@id([chatId])
}

model Message {
  id        String   @id @unique @default(cuid())
  message   String   @db.Text
  author    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  chat       Chat         @relation(fields: [chatId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  chatId     String
  Attachment Attachment[]

  @@index([chatId])
}

model Attachment {
  id        String   @id @unique @default(cuid())
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  message   Message? @relation(fields: [messageId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  messageId String?
  post      Post?    @relation(fields: [postId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  postId    String?

  @@index([messageId])
  @@index([postId])
}

model DonationItem {
  id        String   @id @unique @default(uuid())
  name      String   @unique
  price     Float    @unique
  status    Boolean
  image     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Donates Donation[]
}

model Donation {
  id         String        @id @unique @default(uuid())
  donorName  String
  donorEmail String
  quantity   Int
  message    String        @db.Text
  status     PaymentStatus @default(PENDING)
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  item          DonationItem @relation(fields: [itemId], references: [id])
  itemId        String
  transaction   Transaction  @relation(fields: [transactionId], references: [reference], onUpdate: Cascade, onDelete: NoAction)
  transactionId String
  donor         User?        @relation(fields: [donorId], references: [id], onUpdate: Cascade, onDelete: NoAction)
  donorId       String?

  @@index([itemId])
  @@index([transactionId])
  @@index([donorId])
}

model Project {
  id          String     @id @unique @default(cuid())
  title       String
  status      PostStatus @default(INACTIVE)
  coverImage  String
  description String     @db.Text
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  visibleTo   Json?      @default("{\"memberships\": \"[]\"}")

  page   Page   @relation(fields: [pageId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  pageId String
  post   Post[]

  @@index([pageId])
}

model Post {
  id        String      @id @unique @default(cuid())
  title     String
  caption   String      @db.Text
  type      ContentType
  status    PostStatus  @default(ACTIVE)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  thumbnail String?
  file      String?
  visibleTo Json?       @default("{\"memberships\": \"[]\"}")

  page   Page   @relation(fields: [pageId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  pageId String

  project    Project?     @relation(fields: [projectId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  projectId  String?
  Attachment Attachment[]

  @@index([pageId])
  @@index([projectId])
}

model Transaction {
  reference String            @id @unique @default(cuid())
  provider  String
  payer     String
  payee     String
  amount    Float
  currency  String
  remark    String
  status    TransactionStatus @default(PENDING)
  createdAt DateTime          @default(now())

  donation     Donation[]
  subscription Subscription[]
}

enum TransactionStatus {
  PENDING
  SUCCESS
  FAILED
}

enum PaymentStatus {
  PENDING
  SUCCESS
}

enum ContentType {
  TEXT
  IMAGE
  VIDEO
  AUDIO
  FILE
}

enum SocialLinkType {
  FACEBOOK
  TWITTER
  INSTAGRAM
  YOUTUBE
  LINKEDIN
  TIKTOK
}

enum GoalType {
  COMMUNITY
  EARNING
}

enum PostStatus {
  BANNED
  ACTIVE
  INACTIVE
}

enum PageStatus {
  DORMANT
  BANNED
  ACTIVE
  INACTIVE
}
