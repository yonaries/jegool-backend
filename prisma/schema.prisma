// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @unique @default(cuid())
  firstName    String
  lastName     String
  displayName  String
  email        String   @unique
  status       Boolean  @default(true)
  residence    String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  profileImage String?

  Page         Page?
  Subscription Subscription[]
  user1Id      PrivateChat[]  @relation("user1Id")
  user2Id      PrivateChat[]  @relation("user2Id")
}

model Page {
  id                    String   @id @unique @default(cuid())
  url                   String   @unique
  name                  String
  headline              String
  profileImage          String
  description           String
  status                Boolean  @default(true)
  earningsVisibility    Boolean  @default(false)
  supportersVisibility  Boolean  @default(false)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  highlightedMembership String?
  coverImage            String?
  introVideo            String?
  brandColor            String?

  owner         User           @relation(fields: [ownerId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  ownerId       String         @unique
  Membership    Membership[]
  Goal          Goal[]
  CommunityChat CommunityChat?
  SocialLink    SocialLink[]
  Project       Project[]
  Post          Post[]
}

model Membership {
  id          String   @id @unique @default(cuid())
  title       String
  coverImage  String
  fee         Float
  status      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  description String?

  page         Page           @relation(fields: [pageId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  pageId       String
  Subscription Subscription[]
  Benefit      Benefit[]
  Project      Project[]
  Post         Post[]
}

model Subscription {
  id        String   @id @unique @default(cuid())
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  subscriber   User   @relation(fields: [subscriberId], references: [id], onUpdate: Cascade, onDelete: NoAction)
  subscriberId String

  membership   Membership @relation(fields: [membershipId], references: [id], onUpdate: Cascade, onDelete: NoAction)
  membershipId String
}

model Goal {
  id          String   @id @unique @default(cuid())
  title       String
  type        String
  amount      Int
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  page   Page   @relation(fields: [pageId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  pageId String
}

// TODO: CHECK IF BENEFIT CATEGORY IS NEEDED
model BenefitCategory {
  id          String    @id @unique @default(cuid())
  name        String
  description String
  Benefit     Benefit[]
}

model Benefit {
  id   String @id @unique @default(cuid())
  name String

  BenefitCategory   BenefitCategory @relation(fields: [benefitCategoryId], references: [id], onUpdate: Cascade, onDelete: NoAction)
  benefitCategoryId String
  Membership        Membership      @relation(fields: [membershipId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  membershipId      String
}

model SocialLink {
  id   String @id @unique @default(cuid())
  name String
  url  String

  page   Page   @relation(fields: [pageId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  pageId String
}

model Chat {
  id        String   @id @unique @default(cuid())
  createdAt DateTime @default(now())

  Message       Message[]
  PrivateChat   PrivateChat?
  CommunityChat CommunityChat?
}

model PrivateChat {
  id      Chat    @relation(fields: [chatId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  chatId  String  @unique
  user1   User?   @relation(fields: [user1Id], references: [id], name: "user1Id", onUpdate: Cascade, onDelete: SetNull)
  user1Id String?
  user2   User?   @relation(fields: [user2Id], references: [id], name: "user2Id", onUpdate: Cascade, onDelete: SetNull)
  user2Id String?

  @@id([chatId])
}

model CommunityChat {
  id     Chat   @relation(fields: [chatId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  chatId String @unique
  page   Page   @relation(fields: [pageId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  pageId String @unique

  @@id([chatId])
}

model Message {
  id        String   @id @unique @default(cuid())
  content   String
  author    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  chat       Chat         @relation(fields: [chatId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  chatId     String
  Attachment Attachment[]
}

model Attachment {
  id          String  @id @unique @default(cuid())
  url         String
  contentType String
  message     Message @relation(fields: [messageId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  messageId   String
}

model DonationItem {
  id        String   @id @unique @default(uuid())
  name      String   @unique
  price     Float    @unique
  status    Boolean
  image     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Donates Donation[]
}

model Donation {
  id         String   @id @unique @default(uuid())
  donorName  String
  donorEmail String
  quantity   Int
  status     String   @default("pending")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  item          DonationItem @relation(fields: [itemId], references: [id])
  itemId        String
  transaction   Transaction  @relation(fields: [transactionId], references: [id], onUpdate: Cascade, onDelete: NoAction)
  transactionId String
}

model Project {
  id          String   @id @unique @default(cuid())
  title       String
  status      Boolean  @default(false)
  coverImage  String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  page         Page        @relation(fields: [pageId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  pageId       String
  // TODO: SEE IF MEMEBERSHIP ID IS NEEDED
  memberShip   Membership? @relation(fields: [membershipId], references: [id], onUpdate: Cascade, onDelete: SetNull)
  membershipId String?
  post         Post[]
}

model Post {
  id          String   @id @unique @default(cuid())
  title       String
  content     String
  contentType String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  thumbnail   String?
  file        String?

  page         Page        @relation(fields: [pageId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  pageId       String
  // TODO: SEE IF MEMEBERSHIP ID IS NEEDED
  memberShip   Membership? @relation(fields: [membershipId], references: [id], onUpdate: Cascade, onDelete: SetNull)
  membershipId String?
  project      Project     @relation(fields: [projectId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  projectId    String
}

model Transaction {
  id        String   @id @unique @default(cuid())
  reference String
  provider  String
  payer     String
  payee     String
  amount    Float
  currency  String
  remark    String
  status    String
  createdAt DateTime @default(now())

  donation Donation[]
}

//?? CHECK IF CONTENT TYPE TABLE IS NEEDED
